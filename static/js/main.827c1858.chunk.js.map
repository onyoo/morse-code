{"version":3,"sources":["components/settings/index.js","components/morse/device.js","components/morse/utils.js","components/morseSchool/index.js","components/morse/index.js","App.js","reportWebVitals.js","index.js"],"names":["MorseSettings","props","state","keybindings","backspace","esc","style","width","Object","keys","this","map","key","idx","textAlign","settings","sections","section","class","hotkey","onClick","changeSettings","displayMode","label","type","min","max","value","dotTime","className","id","step","onChange","e","target","React","Component","Device","componentDidMount","window","onblur","event","stopListening","document","body","addEventListener","reset","onOff","reading","recordKeyDown","recordKeyUp","newMorseCode","morseCode","setCode","setState","tapStart","tapLastEnd","newCode","noKeyTime","Math","round","timeStamp","newDuration","tapDurations","avg","reduce","a","b","length","parsedLetters","acc","curr","console","log","lastChar","newValue","slice","translation","str","morse","translate","lastDuration","lastSymbol","averageTap","obj","tapN","values","currentChar","currentSubmission","join","MorseSchool","codeObj","readingClass","Morse","float","remember","App","hi","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.827c1858.chunk.js","sourcesContent":["import React from \"react\";\n\nexport class MorseSettings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keybindings: {\n        backspace: \"Clear & Reset\",\n        esc: \"Start/Stop session\",\n        \"any other key\": \"Clicker\",\n      },\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <table style={{ width: \"30%\" }}>\n          <tbody>\n            {Object.keys(this.state.keybindings).map((key, idx) => {\n              return (\n                <tr key={idx}>\n                  <td style={{ textAlign: \"right\" }}>{key}: </td>\n                  <td style={{ textAlign: \"center\" }}>\n                    {this.state.keybindings[key]}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <div>\n          {this.props.settings.sections.map((section, idx) => (\n            <div class=\"tooltip\">\n              <span class=\"tooltiptext\">{section.hotkey}</span>\n              <button\n                onClick={() =>\n                  this.props.changeSettings({\n                    settings: {\n                      ...this.props.settings,\n                      displayMode: section.label,\n                    },\n                  })\n                }\n              >\n                {section.label}\n              </button>\n            </div>\n          ))}\n        </div>\n        <input\n          type=\"range\"\n          min=\"0.05\"\n          max=\"0.5\"\n          value={this.props.settings.dotTime}\n          className=\"slider\"\n          id=\"myRange\"\n          step=\"0.01\"\n          onChange={(e) => {\n            this.props.changeSettings({ dotTime: e.target.value });\n          }}\n        />\n        <div>{this.props.settings.displayMode}</div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport morse from \"./alphabet.json\";\nimport { translate } from \"./utils\";\n\nexport class Device extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tapStart: null,\n      tapLastEnd: null,\n      key: null,\n      tapN: 0,\n      tapDurations: [],\n      morseCode: [],\n      lastDuration: null,\n      lastSymbol: null,\n      parsedLetters: [],\n      averageTap: 0,\n      reading: false,\n\n      values: Object.values(morse.morse),\n      currentChar: Object.values(morse.morse)[0],\n      currentSubmission: null,\n    };\n  }\n\n  componentDidMount = (props) => {\n    window.onblur = (event) => {\n      this.stopListening();\n    };\n    document.body.addEventListener(\"keydown\", (event) => {\n      if (event.key === \"Backspace\") {\n        this.reset();\n      } else if (event.key === \"Escape\") {\n        this.onOff();\n      } else if (this.state.key !== event.key && this.state.reading) {\n        this.recordKeyDown(event);\n      }\n    });\n    document.body.addEventListener(\"keyup\", (event) => {\n      if (event.key !== \"Escape\") {\n        this.recordKeyUp(event);\n      }\n    });\n  };\n\n  onOff = () => {\n    let newMorseCode = [...this.state.morseCode];\n    if (this.props.setCode)\n      this.props.setCode({ reading: !this.props.reading });\n    this.setState({ reading: !this.state.reading, morseCode: newMorseCode });\n  };\n\n  stopListening = () => {\n    let newMorseCode = [...this.state.morseCode];\n    if (this.props.setCode) this.props.setCode({ reading: false });\n\n    this.setState({\n      reading: false,\n      tapStart: null,\n      tapLastEnd: null,\n      morseCode: newMorseCode,\n    });\n  };\n\n  recordKeyDown = (event) => {\n    let newCode = [];\n    if (this.state.tapLastEnd) {\n      let noKeyTime = Math.round(\n        ((event.timeStamp - this.state.tapLastEnd) / 1000) * this.props.dotTime\n      );\n      newCode =\n        noKeyTime <= this.props.dotTime * 1\n          ? [\" \"]\n          : noKeyTime <= this.props.dotTime * 3\n          ? [\"   \"]\n          : [\"       \"];\n    }\n    let newMorseCode = [...this.state.morseCode, ...newCode];\n    this.setState({\n      key: event.key,\n      morseCode: newMorseCode,\n      tapLastEnd: null,\n      tapStart: event.timeStamp,\n    });\n  };\n\n  recordKeyUp = (event) => {\n    if (this.state.reading) {\n      const newDuration = (event.timeStamp - this.state.tapStart) / 1000;\n      const tapDurations = [...this.state.tapDurations, newDuration];\n      let avg = tapDurations.reduce((a, b) => a + b) / tapDurations.length;\n      const newCode =\n        newDuration <= this.props.dotTime\n          ? \"*\"\n          : newDuration <= this.props.dotTime * 3.5\n          ? \"-\"\n          : \"\";\n      const newMorseCode = [...this.state.morseCode, newCode];\n\n      const { parsedLetters, translation } = translate(newMorseCode);\n      if (this.props.setCode) this.props.setCode({ translation: translation });\n\n      this.setState({\n        key: null,\n        tapStart: null,\n        tapLastEnd: event.timeStamp,\n        tapDurations: tapDurations,\n        lastDuration: newDuration,\n        lastSymbol: newCode,\n        morseCode: newMorseCode,\n        parsedLetters: parsedLetters,\n        translation: translation,\n        averageTap: avg,\n      });\n    }\n  };\n\n  changeSettings = (obj) => {\n    this.setState({ ...obj });\n  };\n\n  reset = (event) => {\n    if (this.props.setCode) this.props.setCode({ reading: false });\n\n    this.setState({\n      tapStart: null,\n      tapLastEnd: null,\n      key: null,\n      tapN: 0,\n      tapDurations: [],\n      morseCode: [],\n      lastDuration: null,\n      lastSymbol: null,\n      averageTap: 0,\n      reading: false,\n    });\n  };\n\n  render() {\n    let { tapDurations, translation, parsedLetters } = this.state;\n\n    return (\n      <div>\n        {parsedLetters.join(\"\")}\n        <div>\n          <span className=\"stat-item\">\n            Selected Dot Time: {this.props.dotTime}\n          </span>\n          <span className=\"stat-item\">\n            Selected Dash Time: {this.props.dotTime * 3}\n          </span>\n          <span className=\"stat-item\">\n            Last Duration: {this.state.lastDuration}\n          </span>\n          <span className=\"stat-item\">\n            Last Symbol: {this.state.lastSymbol}\n          </span>\n          <span className=\"stat-item\">\n            Average:\n            {tapDurations.reduce((a, b) => a + b, 0) /\n              tapDurations.length /\n              1000}\n          </span>\n        </div>\n        <button onClick={this.reset}>Clear</button>\n      </div>\n    );\n  }\n}\n","import morse from \"./alphabet.json\";\n\nexport const translate = (morseCode) => {\n  const parsedLetters = morseCode.reduce((acc, curr) => {\n    console.log(acc, curr);\n    if (curr === \" \") {\n      return [...acc];\n    } else if (curr === \"   \" || curr === \"       \") {\n      return [...acc, curr];\n    } else {\n      let lastChar = acc[acc.length - 1] ? acc[acc.length - 1] : \"\";\n      let newValue =\n        lastChar === \"   \" || lastChar === \"       \"\n          ? [lastChar, curr]\n          : [lastChar + curr];\n\n      return [...acc.slice(0, acc.length - 1), ...newValue];\n    }\n  }, []);\n\n  let translation = parsedLetters.map((str) => {\n    return str in morse.morse ? morse.morse[str] : str !== \"   \" ? str : \"\";\n  });\n  return { parsedLetters: parsedLetters, translation: translation };\n};\n","import React from \"react\";\nimport morse from \"../morse/alphabet.json\";\nimport { Device } from \"../morse/device\";\n\nexport class MorseSchool extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      values: Object.values(morse.morse),\n      currentChar: Object.values(morse.morse)[0],\n      currentSubmission: null,\n      translation: null,\n      reading: false,\n    };\n  }\n\n  setCode = (codeObj) => {\n    this.setState(codeObj);\n  };\n\n  render() {\n    const readingClass = this.state.reading\n      ? \"reading-class\"\n      : \"not-reading-class\";\n    return (\n      <div>\n        Morse School\n        <div>\n          <h4>Character:</h4>\n          <div>{this.state.currentChar}</div>\n          <h4>Input:</h4>\n          <div>{this.state.currentSubmission}</div>\n          <Device\n            dotTime={this.props.dotTime}\n            setCode={this.setCode}\n            reading={this.state.reading}\n          />\n          <div>\n            School Translation\n            <br />\n            <div id=\"morse-display\" class={readingClass}>\n              {this.state.translation}\n              <br />\n              {readingClass}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport morse from \"./alphabet.json\";\nimport { MorseSettings } from \"../settings\";\nimport { MorseSchool } from \"../morseSchool\";\nimport { Device } from \"./device\";\n\nexport class Morse extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      settings: {\n        dotTime: 0.5,\n        sections: [\n          { label: \"Freestyle\", hotkey: \"ctrl + f\" },\n          { label: \"Training\", hotkey: \"ctrl + t\" },\n          { label: \"Decryption\", hotkey: \"ctrl + d\" },\n        ],\n        displayMode: \"Freestyle\",\n      },\n    };\n  }\n\n  changeSettings = (obj) => {\n    this.setState({ ...obj });\n  };\n\n  render() {\n    const { displayMode } = this.state.settings;\n    const readingClass = this.state.reading\n      ? \"reading-class\"\n      : \"not-reading-class\";\n    return (\n      <div>\n        <MorseSettings\n          settings={this.state.settings}\n          changeSettings={this.changeSettings}\n        />\n        {displayMode === \"Freestyle\" ? (\n          <div>\n            <Device\n              dotTime={this.state.settings.dotTime}\n              setCode={this.changeSettings}\n              reading={this.state.reading}\n            />\n            <div id=\"morse-display\" className={readingClass}>\n              {this.state.translation}\n              <br />\n              {readingClass}\n            </div>\n          </div>\n        ) : displayMode === \"Training\" ? (\n          <MorseSchool dotTime={this.state.settings.dotTime} />\n        ) : null}\n        <table style={{ width: \"100%\" }}>\n          <tbody\n            style={{ width: \"100%\", float: \"left\" }}\n            className=\"centered has-border\"\n          >\n            {Object.keys(morse.remember).map((key, idx) => {\n              return (\n                <tr key={idx}>\n                  <td style={{ textAlign: \"right\" }}>{key}: </td>\n                  <td style={{ textAlign: \"center\" }}>{morse.remember[key]}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n","import \"./App.css\";\nimport { Morse } from \"./components/morse\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Morse hi />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}