{"version":3,"sources":["components/settings/index.js","components/morse/index.js","App.js","reportWebVitals.js","index.js"],"names":["MorseSettings","props","state","keybindings","style","width","Object","keys","this","map","key","textAlign","type","min","max","value","dotTime","class","id","step","onChange","e","changeSettings","target","React","Component","Morse","componentDidMount","window","onblur","event","stopListening","document","body","addEventListener","reset","onOff","reading","recordKeyDown","recordKeyUp","newMorseCode","morseCode","setState","tapStart","tapLastEnd","newCode","noKeyTime","Math","round","timeStamp","newDuration","tapDurations","avg","reduce","a","b","length","lastDuration","lastSymbol","averageTap","obj","tapN","translation","acc","curr","console","log","lastChar","newValue","slice","str","morse","readingClass","onClick","float","remember","App","className","hi","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0fa534cf.chunk.js","sourcesContent":["import React from \"react\"\n\nexport class MorseSettings extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            keybindings: {\n                \"backspace\": \"Clear & Reset\",\n                \"esc\": \"Start/Stop session\",\n                \"any other key\": \"Clicker\"\n            }\n        };\n      }\n\n    render() {\n        return (\n        <div>\n            <table style={{width:\"30%\"}}>\n                {Object.keys(this.state.keybindings).map(key => {\n                    return <tr>\n                        <td style={{textAlign: \"right\"}}>{key}: </td>\n                        <td style={{textAlign: \"center\"}}>{this.state.keybindings[key]}</td>\n                        </tr>\n                })}\n            </table>\n            <input \n                type=\"range\" \n                min=\"0.05\" \n                max=\"0.5\" \n                value={this.props.dotTime} \n                class=\"slider\" \n                id=\"myRange\" \n                step=\"0.01\"\n                onChange={(e) => {this.props.changeSettings({dotTime: e.target.value})}}\n            ></input>\n        </div>)\n    }\n}\n\n\n\n","import React from \"react\"\nimport morse from \"./alphabet.json\"\nimport {MorseSettings} from \"../settings\"\n\nexport class Morse extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dotTime: 0.5,\n            tapStart: null, \n            tapLastEnd: null,\n            key: null, \n            tapN: 0,\n            tapDurations: [],\n            morseCode: [],\n            lastDuration: null,\n            lastSymbol: null,\n            averageTap: 0,\n            reading: false\n        };\n      }\n\n    componentDidMount = (props) => {\n        window.onblur = (event) => {\n            this.stopListening()\n        }\n        document.body.addEventListener('keydown', (event) => {\n            if (event.key === \"Backspace\") {\n                this.reset()\n            } else if (event.key === \"Escape\") {\n                this.onOff()\n            } else if (this.state.key !== event.key && this.state.reading) {\n                this.recordKeyDown(event)\n            }\n        });\n        document.body.addEventListener('keyup', (event) => {\n            if (event.key !== \"Escape\") {\n                this.recordKeyUp(event)\n            }\n        });\n    }\n\n    onOff = () => {\n        let newMorseCode = [...this.state.morseCode]\n        this.setState({reading: !this.state.reading, morseCode: newMorseCode})\n    }\n\n    stopListening = () => {\n        let newMorseCode = [...this.state.morseCode]\n        this.setState({\n            reading: false,\n            tapStart: null, \n            tapLastEnd: null,\n            morseCode: newMorseCode\n        })\n    }\n\n    recordKeyDown = (event) => {\n        let newCode = []\n        if (this.state.tapLastEnd) {\n            let noKeyTime = Math.round((event.timeStamp - this.state.tapLastEnd) / 1000 * this.state.dotTime)\n            newCode = noKeyTime <= this.state.dotTime * 1 ? [\" \"] : noKeyTime <= this.state.dotTime * 3 ? [\"   \"] :[\"       \"]\n        }\n        let newMorseCode = [...this.state.morseCode, ...newCode]\n        this.setState({\n            key: event.key, \n            morseCode: newMorseCode,\n            tapLastEnd: null,\n            tapStart: event.timeStamp\n        })\n    }\n\n    recordKeyUp = (event) => {\n        if (this.state.reading) {\n            const newDuration = (event.timeStamp - this.state.tapStart) / 1000\n            const tapDurations = [...this.state.tapDurations, newDuration]\n            let avg = tapDurations.reduce((a, b) => a + b) / tapDurations.length\n            const newCode = \n                newDuration <= this.state.dotTime ? \n                \"*\" : \n                newDuration <= this.state.dotTime * 3.5 ?\n                \"-\" : \n                \"\"\n            const newMorseCode = [...this.state.morseCode, newCode]\n            this.setState({\n                key: null, \n                tapStart: null,\n                tapLastEnd: event.timeStamp,\n                tapDurations: tapDurations,\n                lastDuration: newDuration,\n                lastSymbol: newCode,\n                morseCode: newMorseCode,\n                averageTap: avg\n            })\n        }\n    }\n\n    changeSettings = (obj) => {\n        this.setState({...obj})\n    }\n\n    reset = (event) => {\n        this.setState({\n            tapStart: null, \n            tapLastEnd: null,\n            key: null, \n            tapN: 0,\n            tapDurations: [],\n            morseCode: [],\n            lastDuration: null,\n            lastSymbol: null,\n            averageTap: 0,\n            reading: false\n        })\n    }\n\n    render() {\n        let {tapDurations, morseCode, ...rest} = this.state\n\n    const parsedLetters = morseCode.reduce((acc, curr) => { \n        console.log(acc, curr)\n        if (curr === \" \") {\n            return [...acc]\n        } else if (curr === \"   \" || curr === \"       \") {\n            return [...acc, curr]\n        } else {\n            let lastChar = acc[acc.length-1] ? acc[acc.length-1] : \"\"\n            let newValue = lastChar === \"   \" || lastChar === \"       \" ? [lastChar, curr] : [lastChar+curr]\n\n            return [...acc.slice(0,acc.length-1), ...newValue ]\n        } },[])\n\n        let translation = parsedLetters.map(str => {\n            return (str in morse.morse) ? morse.morse[str] : str !== \"   \" ? str : \"\"\n        })\n\n        const readingClass = this.state.reading ? \"reading-class\" : \"not-reading-class\"\n        return (\n        <div>\n            <MorseSettings dotTime={this.state.dotTime} changeSettings={this.changeSettings}/>\n            <div id=\"morse-display\" class={readingClass}>{translation}</div>\n                {morseCode}\n            <button onClick={this.reset}>Clear</button>\n            <div>\n            <span style={{width: \"30%\", float: \"left\"}} class=\"centered has-border\">\n                {Object.keys(morse.remember).map(key => {\n                    return  <tr>\n                                <td style={{textAlign: \"right\"}}>{key}: </td>\n                                <td style={{textAlign: \"center\"}}>{morse.remember[key]}</td>\n                            </tr>\n                })}\n            </span>\n            <span style={{width: \"70%\", float: \"left\"}} class=\"has-border\">\n                <h4>Selected Dot Time: {this.state.dotTime}</h4>\n                <h4>Selected Dash Time: {this.state.dotTime * 3}</h4>\n                <h4>Last Duration: {this.state.lastDuration}</h4>\n                <h4>Last Symbol:   {this.state.lastSymbol}</h4>\n                <h4>\n                    Average: \n                    {tapDurations.reduce((a, b) => a + b, 0)/tapDurations.length/1000}\n                </h4>\n            </span>\n            </div>\n                    {/* your state: {JSON.stringify(rest)} */}\n        </div>)\n\n    }\n}\n\n\n\n","import './App.css';\nimport {Morse} from \"./components/morse\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Morse hi/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}