{"version":3,"sources":["components/settings/index.js","components/morse/index.js","App.js","reportWebVitals.js","index.js"],"names":["MorseSettings","props","state","type","min","max","value","this","dotTime","class","id","step","onChange","e","changeSettings","target","React","Component","Morse","componentDidMount","window","onblur","event","stopListening","document","body","addEventListener","key","onOff","reading","recordKeyDown","recordKeyUp","newMorseCode","morseCode","setState","tapStart","tapLastEnd","newCode","noKeyTime","Math","round","timeStamp","newDuration","tapDurations","avg","reduce","a","b","length","lastDuration","lastSymbol","averageTap","obj","reset","tapN","rest","translation","acc","curr","console","log","lastChar","newValue","slice","map","str","morse","onClick","JSON","stringify","Object","keys","remember","k","App","className","hi","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b5a0a747.chunk.js","sourcesContent":["import React from \"react\"\n\nexport class MorseSettings extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n      }\n\n    render() {\n        return (\n        <div>\n            <input \n                type=\"range\" \n                min=\"0.05\" \n                max=\"0.5\" \n                value={this.props.dotTime} \n                class=\"slider\" \n                id=\"myRange\" \n                step=\"0.01\"\n                onChange={(e) => {this.props.changeSettings({dotTime: e.target.value})}}\n            ></input>\n        </div>)\n    }\n}\n\n\n\n","import React from \"react\"\nimport morse from \"./alphabet.json\"\nimport {MorseSettings} from \"../settings\"\n\nexport class Morse extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dotTime: 0.2,\n            tapStart: null, \n            tapLastEnd: null,\n            key: null, \n            tapN: 0,\n            tapDurations: [],\n            morseCode: [],\n            lastDuration: null,\n            lastSymbol: null,\n            averageTap: 0,\n            reading: false\n        };\n      }\n\n    componentDidMount = (props) => {\n        window.onblur = (event) => {\n            this.stopListening()\n        }\n        document.body.addEventListener('keydown', (event) => {\n            if (event.key === \"Escape\") {\n                this.onOff()\n            } else if (this.state.key !== event.key && this.state.reading) {\n                this.recordKeyDown(event)\n            }\n        });\n        document.body.addEventListener('keyup', (event) => {\n            if (event.key !== \"Escape\") {\n                this.recordKeyUp(event)\n            }\n        });\n    }\n\n    onOff = () => {\n        let newMorseCode = [...this.state.morseCode]\n        // // let command = !this.state.reading ? \" Start\" : \" Stop\"\n        // if (this.state.reading) newMorseCode.push(command)\n        this.setState({reading: !this.state.reading, morseCode: newMorseCode})\n    }\n\n    stopListening = () => {\n        let newMorseCode = [...this.state.morseCode]\n        // if (this.state.reading) newMorseCode.push(\" Stop\")\n        this.setState({\n            reading: false,\n            tapStart: null, \n            tapLastEnd: null,\n            morseCode: newMorseCode\n        })\n    }\n\n    recordKeyDown = (event) => {\n        let newCode = []\n        if (this.state.tapLastEnd) {\n            let noKeyTime = Math.round((event.timeStamp - this.state.tapLastEnd) / 1000 * this.state.dotTime)\n            // newCode = new Array(Math.floor(noKeyTime)).fill(\"   \")\n            newCode = noKeyTime <= 1 ? [\" \"] : noKeyTime <= 3 ? [\"   \"] :[\"       \"]\n        }\n        let newMorseCode = [...this.state.morseCode, ...newCode]\n        this.setState({\n            key: event.key, \n            morseCode: newMorseCode,\n            tapLastEnd: null,\n            tapStart: event.timeStamp\n        })\n    }\n\n    recordKeyUp = (event) => {\n        if (this.state.reading) {\n            const newDuration = (event.timeStamp - this.state.tapStart) / 1000\n            const tapDurations = [...this.state.tapDurations, newDuration]\n            let avg = tapDurations.reduce((a, b) => a + b) / tapDurations.length\n            const newCode = \n                newDuration <= this.state.dotTime ? \n                \"*\" : \n                newDuration <= this.state.dotTime * 3.5 ?\n                \"-\" : \n                \"\"\n            const newMorseCode = [...this.state.morseCode, newCode]\n            this.setState({\n                key: null, \n                tapStart: null,\n                tapLastEnd: event.timeStamp,\n                tapDurations: tapDurations,\n                lastDuration: newDuration,\n                lastSymbol: newCode,\n                morseCode: newMorseCode,\n                averageTap: avg\n            })\n        }\n    }\n\n    changeSettings = (obj) => {\n        this.setState({...obj})\n    }\n\n    reset = (event) => {\n        this.setState({\n            tapStart: null, \n            tapLastEnd: null,\n            key: null, \n            tapN: 0,\n            tapDurations: [],\n            morseCode: [],\n            lastDuration: null,\n            lastSymbol: null,\n            averageTap: 0,\n            reading: false\n        })\n    }\n\n    render() {\n        let {tapDurations, morseCode, ...rest} = this.state\n\n    const parsedLetters = morseCode.reduce((acc, curr) => { \n        console.log(acc, curr)\n        if (curr === \" \") {\n            return [...acc]\n        } else if (curr === \"   \" || curr === \"       \") {\n            return [...acc, curr]\n        } else {\n            let lastChar = acc[acc.length-1] ? acc[acc.length-1] : \"\"\n            let newValue = lastChar === \"   \" || lastChar === \"       \" ? [lastChar, curr] : [lastChar+curr]\n\n            return [...acc.slice(0,acc.length-1), ...newValue ]\n        } },[])\n\n        let translation = parsedLetters.map(str => {\n            return (str in morse.morse) ? morse.morse[str] : str !== \"   \" ? str : \"\"\n        })\n\n\n        return (\n        <div>\n            <MorseSettings dotTime={this.state.dotTime} changeSettings={this.changeSettings}/>\n            <div id=\"morse-display\">{translation}</div>\n                {morseCode}\n            <button onClick={this.reset}>Clear</button>\n            <h4>Selected Dot Time: {this.state.dotTime}</h4>\n            <h4>Selected Dash Time: {this.state.dotTime * 3}</h4>\n            <h4>Last Duration: {this.state.lastDuration}</h4>\n            <h4>Last Symbol:   {this.state.lastSymbol}</h4>\n            <h4>\n                Average: \n                {tapDurations.reduce((a, b) => a + b, 0)/tapDurations.length/1000}\n            </h4>\n            <div>\n                your state: {JSON.stringify(rest)}\n                <br/>\n                <div>\n                    Remember Remember the 5th of November:\n                    <div>\n                        {Object.keys(morse.remember).map(k => {\n                            return <div>{k}: {morse.remember[k]}</div>\n                        })}\n                    </div>\n                </div>\n                <br/>\n                Morse: {JSON.stringify(morse)}\n            </div>\n        </div>)\n\n    }\n}\n\n\n\n","import './App.css';\nimport {Morse} from \"./components/morse\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Morse hi/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}